== Concurrencia

La mayoría de los lenguajes de programación están diseñados para especificar y ejecutar las instrucciones secuencialmente. Tomemos la siguiente secuencia de instrucciones que se ejecutan en un programa con las variable `a` y `b` inicializadas a `0`

----
a = a + 1
b = b + a
print a, b
----

Es muy fácil saber que el resultado de imprimir las tres variables será `1 1`. Si las dos asignaciones se repiten el resultado será `2 3`, el siguiente `3 6`, etc. 

Ahora supongamos que este fragmento de código se ejecuta en procesos o hilos diferentes (`P` y `Q`) sobre un sistema con un único procesador y que tanto `a` como `b` con *variables compartidas*. Se puede producir la siguiente *intercalación*:


----
Proceso P   |  Proceso Q 

...
a = a + 1      
               a = a + 1
               b = b + a
               print a, b
               ...
b = b + a
print a, b
----

El resultado que observaremos será:

----
2 2 # Q
2 4 # P
----

Ninguno de ambos eran los valores que esperábamos



----
movl    counter(%rip), %eax
addl    $1, %eax
movl    %eax, counter(%rip)
----

Puede verse el código en <<threads.c>>

=== Concurrencia vs paralelismo

Un conjunto de programas secuenciales, o procesos, que podrían ejecutarse en paralelo. Los procesos se escriben con un conjunto de instrucciones atómicas, la ejecución se realiza ejecutando una secuencia de instrucciones obtenidas por una intercalación arbitraria de los procesos.

	p1 → p2 → q1 → q2
	p1 → q1 → p2 → q2

----
while(turno !=0)
/* SC*/
turno = 1;
----

El código anterior...
